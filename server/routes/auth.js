const jwt = require('jsonwebtoken')
const express = require('express')
const bcrypt = require('bcryptjs')
const User = require('../models/User')
const { authenticateToken } = require('../middleware/auth') // ‚Üê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
const router = express.Router()
const crypto = require('crypto')
const nodemailer = require('nodemailer')

// POST /api/auth/register - ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
router.post('/register', async (req, res) => {
  try {
    const { username, email, password, owner_name, store_name, store_phone, store_address } = req.body

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    if (!username || !email || !password || !owner_name || !store_name) {
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
      })
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    if (password.length < 6) {
      return res.status(400).json({
        success: false,
        message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£'
      })
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ username ‡∏´‡∏£‡∏∑‡∏≠ email ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ username ‡∏´‡∏£‡∏∑‡∏≠ email ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingUser = await User.findOne({
      $or: [
        { username },
        { email: email.toLowerCase() }
      ]
    })

    if (existingUser) {
      return res.status(409).json({
        success: false,
        message: existingUser.username === username
          ? 'Username ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
          : 'Email ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
      })
    }

    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const hashedPassword = await bcrypt.hash(password, 10)

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
    const newUser = new User({
      username: username.trim(),
      email: email.trim().toLowerCase(),
      password: hashedPassword,
      owner_name: owner_name.trim(),
      store_name: store_name.trim(),
      store_phone: store_phone ? store_phone.trim() : '',
      store_address: store_address ? store_address.trim() : '',
      role: 'user',
      isActive: true
    })

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await newUser.save()

    // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö (‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô)
    const userWithoutPassword = {
      id: newUser._id,
      username: newUser.username,
      email: newUser.email,
      owner_name: newUser.owner_name,
      store_name: newUser.store_name,
      store_phone: newUser.store_phone,
      store_address: newUser.store_address,
      role: newUser.role,
      isActive: newUser.isActive,
      createdAt: newUser.createdAt
    }

    res.status(201).json({
      success: true,
      message: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        user: userWithoutPassword
      }
    })

    console.log(`‚úÖ New user registered: ${username}`)
  } catch (error) {
    console.error('Register error:', error)
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å'
    })
  }
})




// POST /api/auth/login - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
router.post('/login', async (req, res) => {
  try {
    const { username, password } = req.body

    if (!username || !password) {
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å username ‡πÅ‡∏•‡∏∞ password'
      })
    }

    // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const user = await User.findOne({
      $or: [
        { username },
        { email: username.toLowerCase() }
      ]
    })

    if (!user) {
      return res.status(401).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
      })
    }

    // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    if (user.role === 'employee' && !user.isActive) {
      return res.status(403).json({
        success: false,
        message: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
      })
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const isPasswordValid = await bcrypt.compare(password, user.password)

    if (!isPasswordValid) {
      return res.status(401).json({
        success: false,
        message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      })
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token
    const tokenPayload = {
      userId: user._id,
      username: user.username,
      role: user.role
    }
    // >>>> ‡πÉ‡∏™‡πà parent_user_id ‡πÉ‡∏ô token ‡∏î‡πâ‡∏ß‡∏¢‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô employee
    if (user.role === 'employee' && user.parent_user_id) {
      tokenPayload.parent_user_id = user.parent_user_id
    }

    const token = jwt.sign(
      tokenPayload,
      process.env.JWT_SECRET || 'your-secret-key',
      { expiresIn: '24h' }
    )

    // ‚≠ê ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° user object ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
    const userData = {
      _id: user._id,
      id: user._id,
      username: user.username,
      email: user.email,
      role: user.role,
      owner_name: user.owner_name,
      store_name: user.store_name,
      store_phone: user.store_phone,
      store_address: user.store_address,
      // >>>> ‡πÉ‡∏™‡πà parent_user_id ‡∏•‡∏á userData ‡πÄ‡∏™‡∏°‡∏≠ (null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà employee)
      parent_user_id: user.parent_user_id || null
    }

    // ‚≠ê ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô employee ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏à‡∏≤‡∏Å owner ‡∏î‡πâ‡∏ß‡∏¢ (optional)
    if (user.role === 'employee' && user.parent_user_id) {
      const owner = await User.findById(user.parent_user_id)
      if (owner) {
        userData.store_name = owner.store_name
      }
    }

    res.json({
      success: true,
      message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        token,
        user: userData
      }
    })
  } catch (error) {
    console.error('Login error:', error)
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'
    })
  }
})


// POST /api/auth/logout (optional)
router.post('/logout', (req, res) => {
  res.json({
    success: true,
    message: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
  })
})

router.post('/forgot-password', async (req, res) => {
  try {
    console.log('üîç Forgot password request received:', req.body)

    const { email } = req.body

    if (!email) {
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Email'
      })
    }

    console.log('üîé Searching for user with email:', email)

    const user = await User.findOne({ email: email.toLowerCase() })

    if (!user) {
      console.log('‚ùå User not found with email:', email)
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Email ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
      })
    }

    console.log('‚úÖ User found:', user.owner_name)

    const resetToken = crypto.randomBytes(32).toString('hex')
    const resetExpires = new Date(Date.now() + 15 * 60 * 1000)

    console.log('üîê Generated reset token for user:', user.email)

    user.resetPasswordToken = resetToken
    user.resetPasswordExpires = resetExpires
    await user.save()

    console.log('üíæ Token saved to database')

    const resetUrl = `${req.protocol}://${req.get('host')}/reset-password.html?token=${resetToken}`
    console.log('üîó Reset URL:', resetUrl)

    console.log('üìß Attempting to send reset email...')
    await sendResetEmail(user.email, user.owner_name, resetUrl)

    res.json({
      success: true,
      message: '‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Email ‡πÅ‡∏•‡πâ‡∏ß'
    })

    console.log(`üìß Reset email sent to: ${user.email}`)
  } catch (error) {
    console.error('‚ùå Forgot password error:', error)
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Email: ' + error.message
    })
  }
})

// POST /api/auth/reset-password - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
router.post('/reset-password', async (req, res) => {
  try {
    const { token, newPassword } = req.body

    if (!token || !newPassword) {
      return res.status(400).json({
        success: false,
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
      })
    }

    if (newPassword.length < 6) {
      return res.status(400).json({
        success: false,
        message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£'
      })
    }

    // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å token ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
    const user = await User.findOne({
      resetPasswordToken: token,
      resetPasswordExpires: { $gt: Date.now() }
    })

    if (!user) {
      return res.status(400).json({
        success: false,
        message: 'Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß'
      })
    }

    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    const hashedPassword = await bcrypt.hash(newPassword, 10)

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡∏ö token
    user.password = hashedPassword
    user.resetPasswordToken = undefined
    user.resetPasswordExpires = undefined
    await user.save()

    res.json({
      success: true,
      message: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    })

    console.log(`üîê Password reset successful for: ${user.email}`)
  } catch (error) {
    console.error('Reset password error:', error)
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô'
    })
  }
})

async function sendResetEmail (email, name, resetUrl) {
  try {
    // Debug ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• environment
    console.log('üìß All email environment variables:')
    console.log('SMTP_USER:', process.env.SMTP_USER)
    console.log('SMTP_PASS:', process.env.SMTP_PASS ? 'EXISTS' : 'MISSING')
    console.log('EMAIL_USER:', process.env.EMAIL_USER)
    console.log('EMAIL_PASS:', process.env.EMAIL_PASS ? 'EXISTS' : 'MISSING')

    // ‡πÉ‡∏ä‡πâ fallback ‡∏´‡∏≤ credentials ‡∏ó‡∏µ‡πà‡∏°‡∏µ
    const emailUser = process.env.SMTP_USER || process.env.EMAIL_USER
    const emailPass = process.env.SMTP_PASS || process.env.EMAIL_PASS

    console.log('üìß Using credentials:')
    console.log('User:', emailUser)
    console.log('Pass:', emailPass ? 'EXISTS' : 'MISSING')

    if (!emailUser || !emailPass) {
      throw new Error('Email credentials not found in environment variables')
    }

    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: emailUser,
        pass: emailPass
      }
    })

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô
    console.log('üîå Testing SMTP connection...')
    await transporter.verify()
    console.log('‚úÖ SMTP connection successful')

    const mailOptions = {
      from: emailUser,
      to: email,
      subject: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô - POS System',
      html: `
        <h2>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì ${name}</h2>
        <p>‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö POS System</p>
        <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà:</p>
        <a href="${resetUrl}" style="background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">
          ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        </a>
        <p><small>‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ</small></p>
      `
    }

    console.log('üì¨ Sending email to:', email)
    await transporter.sendMail(mailOptions)
    console.log('‚úÖ Email sent successfully!')
  } catch (error) {
    console.error('‚ùå Email send error:', error)
    throw error
  }
}

// GET /api/auth/users - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
router.get('/users', async (req, res) => {
  try {
    const users = await User.find({}, '-password')

    res.json({
      success: true,
      count: users.length,
      data: users
    })
  } catch (error) {
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
    })
  }
})
// GET /api/auth/profile - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
router.get('/profile', authenticateToken, async (req, res) => {
  try {
    const user = await User.findById(req.user.userId).select('-password')

    if (!user) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      })
    }

    res.json({
      success: true,
      data: user
    })
  } catch (error) {
    console.error('Profile error:', error)
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
    })
  }
})

// PUT /api/auth/profile - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user
router.put('/profile', authenticateToken, async (req, res) => {
  try {
    const { owner_name, store_name, store_phone, store_address } = req.body

    const updatedUser = await User.findByIdAndUpdate(
      req.user.userId,
      {
        owner_name,
        store_name,
        store_phone,
        store_address,
        updatedAt: new Date()
      },
      { new: true, select: '-password' }
    )

    res.json({
      success: true,
      message: '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: updatedUser
    })
  } catch (error) {
    console.error('Update profile error:', error)
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó'
    })
  }
})
module.exports = router
