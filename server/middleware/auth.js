const jwt = require('jsonwebtoken')
const User = require('../models/User')

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key'

// Token blacklist - ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ Redis
const tokenBlacklist = new Set()

const authenticateToken = async (req, res, next) => {
  try {
    const authHeader = req.headers.authorization
    const token = authHeader && authHeader.split(' ')[1]

    if (!token) {
      return res.status(401).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö access token'
      })
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token blacklist
    if (tokenBlacklist.has(token)) {
      return res.status(401).json({
        success: false,
        message: 'Token ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß'
      })
    }

    // Verify token
    const decoded = jwt.verify(token, JWT_SECRET)
    
    console.log('üîç JWT decoded payload:', decoded)

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const user = await User.findById(decoded.userId).select('-password -resetPasswordToken -resetPasswordExpires')

    if (!user) {
      console.log('‚ùå User not found in database:', decoded.userId)
      return res.status(403).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö'
      })
    }

    console.log('üë§ User found:', {
      _id: user._id,
      username: user.username,
      role: user.role,
      isActive: user.isActive,
      parent_user_id: user.parent_user_id
    })

    // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Logic ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö isActive ***
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö role 'user' (‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô) - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö isActive
    if (user.role === 'user') {
      console.log('‚úÖ User role (owner) - skipping isActive check')
    }
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö role 'employee' - ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö isActive
    else if (user.role === 'employee') {
      if (!user.isActive) {
        console.log('‚ùå Employee account is inactive')
        return res.status(403).json({
          success: false,
          message: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
        })
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö parent_user_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
      if (user.parent_user_id) {
        const parentUser = await User.findById(user.parent_user_id).select('isActive')
        if (!parentUser || !parentUser.isActive) {
          console.log('‚ùå Parent user (owner) is inactive')
          return res.status(403).json({
            success: false,
            message: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ'
          })
        }
        console.log('‚úÖ Parent user (owner) is active')
      }
    }
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö role ‡∏≠‡∏∑‡πà‡∏ô‡πÜ (admin, etc.)
    else {
      if (!user.isActive) {
        console.log('‚ùå Account is inactive for role:', user.role)
        return res.status(403).json({
          success: false,
          message: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
        })
      }
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô request object
    req.user = {
      userId: user._id,
      _id: user._id,
      username: user.username,
      role: user.role,
      parent_user_id: user.parent_user_id,
      isActive: user.isActive
    }

    console.log('‚úÖ Auth middleware passed, req.user:', req.user)

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° token ‡πÉ‡∏ô req ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô logout
    req.token = token

    next()
  } catch (err) {
    console.error('‚ùå Auth middleware error:', err)
    
    if (err.name === 'TokenExpiredError') {
      return res.status(401).json({
        success: false,
        message: 'Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà',
        code: 'TOKEN_EXPIRED'
      })
    }
    
    if (err.name === 'JsonWebTokenError') {
      return res.status(403).json({
        success: false,
        message: 'Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        code: 'INVALID_TOKEN'
      })
    }

    return res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå'
    })
  }
}

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏ö‡∏ö optional (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
const optionalAuth = async (req, res, next) => {
  try {
    const authHeader = req.headers.authorization
    const token = authHeader && authHeader.split(' ')[1]

    if (!token) {
      req.user = null
      return next()
    }

    // ‡πÉ‡∏ä‡πâ authenticateToken ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà return error ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token
    await authenticateToken(req, res, (err) => {
      if (err) {
        req.user = null
      }
      next()
    })
  } catch (error) {
    req.user = null
    next()
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö logout (‡πÄ‡∏û‡∏¥‡πà‡∏° token ‡πÄ‡∏Ç‡πâ‡∏≤ blacklist)
const blacklistToken = (token) => {
  tokenBlacklist.add(token)
  
  // ‡∏•‡∏ö token ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å blacklist ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (15 ‡∏ô‡∏≤‡∏ó‡∏µ)
  setTimeout(() => {
    tokenBlacklist.delete(token)
  }, 15 * 60 * 1000)
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô blacklist ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
const isTokenBlacklisted = (token) => {
  return tokenBlacklist.has(token)
}

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡πâ‡∏≤‡∏á expired tokens ‡∏à‡∏≤‡∏Å blacklist
const cleanupBlacklist = () => {
  // ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ Redis ‡πÅ‡∏•‡∏∞ TTL
  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÉ‡∏ä‡πâ Set ‡πÅ‡∏•‡∏∞ setTimeout
  console.log('Cleaning up token blacklist...')
}

// ‡∏£‡∏±‡∏ô cleanup ‡∏ó‡∏∏‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
setInterval(cleanupBlacklist, 60 * 60 * 1000)

module.exports = { 
  authenticateToken, 
  optionalAuth,
  blacklistToken,
  isTokenBlacklisted
}