// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
let allProducts = []
let allCategories = []

// =========================================
// Navigation Functions
// =========================================

// ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Dashboard
function goToDashboard() {
    window.location.href = '/pages/admin/dashboard.html'
}

// ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (POS) - ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
function goToPOS() {
    window.location.href = '/pages/pos/index.html'
}

// ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
function goToCustomers() {
    window.location.href = '/pages/customer/customers.html'
}

// ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
function goToProducts() {
    window.location.href = '/pages/product/products.html'
}

// ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Admin
function goToAdmin() {
    window.location.href = '/pages/admin/admin.html'
}

// =========================================
// Button Event Listeners
// =========================================

document.addEventListener('DOMContentLoaded', function() {
    // ‡∏õ‡∏∏‡πà‡∏° Dashboard
    const dashboardBtn = document.getElementById('dashboard-btn')
    if (dashboardBtn) {
        dashboardBtn.onclick = goToDashboard  // ‡πÑ‡∏õ dashboard.html
    }
    
    // ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    const customersBtn = document.getElementById('customers-btn')
    if (customersBtn) {
        customersBtn.onclick = goToCustomers  // ‡πÑ‡∏õ customers.html
    }
    
    // ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    const productsBtn = document.getElementById('products-btn')
    if (productsBtn) {
        productsBtn.onclick = goToProducts  // ‡πÑ‡∏õ products.html
    }
    
    // ‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå/Admin
    const profileBtn = document.getElementById('profile-btn')
    if (profileBtn) {
        profileBtn.onclick = goToAdmin  // ‡πÑ‡∏õ admin.html
    }
})
// =========================================
// Auth Functions (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ POS)
// =========================================

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ login
function checkAuth() {
    const token = localStorage.getItem('token')
    if (!token) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô')
        window.location.href = '/login.html'
        return false
    }
    return true
}

// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user
function displayUserInfo() {
    const user = JSON.parse(localStorage.getItem('user') || '{}')
    
    
}

// ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
function logout() {
    if (confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
        localStorage.removeItem('token')
        localStorage.removeItem('user')
        window.location.href = '/login.html'
    }
}
function updateAllProfileButtons() {
    const user = JSON.parse(localStorage.getItem('user') || '{}')
    const profileBtn = document.getElementById('profile-btn')
    
    if (profileBtn && user.username) {
        profileBtn.textContent = `üë§ ${user.username}`
    }
}

// =========================================
// POS Products Functions - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
// =========================================



// ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å API
async function loadPOSProducts() {
    try {
        console.log('üîÑ Loading products for POS...')
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ - ‡∏î‡∏∂‡∏á user ID
        const user = JSON.parse(localStorage.getItem('user') || '{}')
        const userId = user._id || user.id
        
        if (!userId) {
            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ID')
        }
        
        const token = localStorage.getItem('token')
        const response = await fetch(`/api/products?userId=${userId}`, {  // ‚Üê ‡πÄ‡∏û‡∏¥‡πà‡∏° userId parameter
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        })
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`)
        }
        
        const result = await response.json()
        console.log('üì• Products loaded for POS:', result)
        
        if (result.success && result.data) {
            allProducts = result.data
            displayPOSProducts(result.data)
            loadPOSCategories()
        } else {
            displayNoProducts()
        }
        
    } catch (error) {
        console.error('‚ùå Error loading POS products:', error)
        displayNoProducts()
    }
}
// ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô POS
// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô displayPOSProducts ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
function displayPOSProducts(products) {
    const productArea = document.getElementById('product-scroll-area')
    
    if (!productArea) {
        console.error('‚ùå Product scroll area not found')
        return
    }
    
    if (!products || products.length === 0) {
        displayNoProducts()
        return
    }
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    const groupedProducts = groupProductsByCategory(products)
    
    let html = ''
    
    // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    for (const [category, categoryProducts] of Object.entries(groupedProducts)) {
        html += `
            <div class="category-section">
                <h4 class="category-title">üè∑Ô∏è ${category}</h4>
                <div class="product-grid">
                    ${categoryProducts.map(product => createProductCard(product)).join('')}
                </div>
            </div>
        `
    }
    
    productArea.innerHTML = html
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
    updateProductCardPrices()
    
    console.log(`‚úÖ Displayed ${products.length} products in POS`)
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
function groupProductsByCategory(products) {
    const grouped = {}
    
    products.forEach(product => {
        const category = product.category || '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
        if (!grouped[category]) {
            grouped[category] = []
        }
        grouped[category].push(product)
    })
    
    return grouped
}



// ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
function displayNoProducts() {
    const productArea = document.getElementById('product-scroll-area')
    if (productArea) {
        productArea.innerHTML = `
            <div class="no-products">
                <h3>üì¶ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h3>
                <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô POS</p>
                <button onclick="goToProducts()" style="padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer;">
                    ‡πÑ‡∏õ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                </button>
            </div>
        `
    }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏ó‡∏≥‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á)
function addToCart(productId) {
    console.log('üõí Adding to cart:', productId)
    alert('üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤)')
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö POS
async function loadPOSCategories() {
    try {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ - ‡∏î‡∏∂‡∏á user ID
        const user = JSON.parse(localStorage.getItem('user') || '{}')
        const userId = user._id || user.id
        
        const token = localStorage.getItem('token')
        const response = await fetch(`/api/products/categories?userId=${userId}`, {  // ‚Üê ‡πÄ‡∏û‡∏¥‡πà‡∏° userId parameter
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        })
        
        const result = await response.json()
        if (result.success && result.data) {
            allCategories = result.data
        }
    } catch (error) {
        console.error('‚ùå Error loading categories for POS:', error)
    }
}

// =========================================
// Payment Mode Functions
// =========================================

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
let currentPaymentMode = '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î'

// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
function switchPaymentMode(mode) {
    currentPaymentMode = mode
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI ‡∏õ‡∏∏‡πà‡∏°
    document.querySelectorAll('.select-payment').forEach(btn => {
        btn.classList.remove('active')
    })
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° active class ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const activeBtn = document.querySelector(`[data-type="${mode}"]`)
    if (activeBtn) {
        activeBtn.classList.add('active')
    }
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô
    updateCartPrices()
    
    console.log(`üí∞ Payment mode changed to: ${mode}`)
}

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô updateCartPrices (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô)
function updateCartPrices() {
    const cartRows = document.querySelectorAll('#cart-items tr')
    
    cartRows.forEach(row => {
        const productId = row.getAttribute('data-product-id')
        const product = allProducts.find(p => p._id === productId)
        
        if (product) {
            const quantityInput = row.querySelector('.quantity-input')
            const priceCell = row.querySelector('.item-price')
            const totalCell = row.querySelector('.item-total')
            
            const quantity = parseInt(quantityInput.value)
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
            const unitPrice = calculateProductPrice(product, quantity)
            const totalPrice = unitPrice * quantity
            
            priceCell.textContent = `‡∏ø${unitPrice.toLocaleString()}`
            totalCell.textContent = `‡∏ø${totalPrice.toLocaleString()}`
        }
    })
    
    updateTotalPrice()
}

// =========================================
// Cart Functions (‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏¥‡∏°)
// =========================================

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
function calculateProductPrice(product, quantity) {
    // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞ ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏™‡∏°‡∏≠
    if (currentPaymentMode === '‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞') {
        return product.credit_price
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡πà‡∏á
    if (quantity >= product.wholesale_minimum) {
        return product.wholesale_price  // ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡πà‡∏á
    } else {
        return product.price  // ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏•‡∏µ‡∏Å
    }
}


// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô addToCart ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
function addToCart(productId) {
    const product = allProducts.find(p => p._id === productId)
    
    if (!product) {
        alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤')
        return
    }
    
    if (product.stock <= 0) {
        alert('‚ùå ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î')
        return
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingRow = document.querySelector(`tr[data-product-id="${productId}"]`)
    
    if (existingRow) {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        const quantityInput = existingRow.querySelector('.quantity-input')
        const currentQty = parseInt(quantityInput.value)
        const newQty = currentQty + 1
        
        if (newQty > product.stock) {
            alert(`‚ùå ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${product.stock} ‡∏ä‡∏¥‡πâ‡∏ô`)
            return
        }
        
        quantityInput.value = newQty
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà
        updateCartItemPriceAndTotal(existingRow, product, newQty)
    } else {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 1)
        addNewCartItem(product, 1)
    }
    
    updateTotalPrice()
    console.log(`‚úÖ Added ${product.name} to cart (${currentPaymentMode})`)
}

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô addNewCartItem
function addNewCartItem(product, quantity = 1) {
    const cartItems = document.getElementById('cart-items')
    
    const row = document.createElement('tr')
    row.setAttribute('data-product-id', product._id)
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
    const unitPrice = calculateProductPrice(product, quantity)
    const totalPrice = unitPrice * quantity
    
    row.innerHTML = `
        <td class="item-name">${product.name}</td>
        <td class="item-quantity">
            <div style="display: flex; align-items: center; gap: 5px;">
                <button onclick="changeQuantity('${product._id}', -1)" style="background: #dc3545; color: white; border: none; border-radius: 3px; width: 25px; height: 25px; cursor: pointer;">-</button>
                <input type="number" class="quantity-input" value="${quantity}" min="1" max="${product.stock}" 
                       onchange="updateCartItemTotal(this.closest('tr'))" style="width: 50px; text-align: center;" />
                <button onclick="changeQuantity('${product._id}', 1)" style="background: #28a745; color: white; border: none; border-radius: 3px; width: 25px; height: 25px; cursor: pointer;">+</button>
            </div>
        </td>
        <td class="item-price">‡∏ø${unitPrice.toLocaleString()}</td>
        <td class="item-total">‡∏ø${totalPrice.toLocaleString()}</td>
        <td class="item-actions">
            <button onclick="removeFromCart(this.closest('tr'))" class="remove-btn">üóëÔ∏è</button>
        </td>
    `
    
    cartItems.appendChild(row)
}

// =========================================
// Payment Processing Functions
// =========================================

// ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô
function processPayment() {
    const cartItems = document.querySelectorAll('#cart-items tr')
    
    if (cartItems.length === 0) {
        alert('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤')
        return
    }
    
    const totalAmount = parseFloat(document.getElementById('total-price').textContent.replace(',', ''))
    
    if (totalAmount <= 0) {
        alert('‚ùå ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
        return
    }
    
    // ‡πÅ‡∏¢‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    if (currentPaymentMode === '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î') {
        processCashPayment(totalAmount)
    } else if (currentPaymentMode === '‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞') {
        processCreditPayment(totalAmount)
    }
}

// ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î
function processCashPayment(totalAmount) {
    // ‡πÅ‡∏™‡∏î‡∏á popup ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    const popup = document.getElementById('cash-popup')
    if (popup) {
        popup.style.display = 'flex'
        
        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        document.getElementById('cash-customer-name').value = ''
        document.getElementById('cash-customer-phone').value = ''
        
        // Focus ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏£‡∏Å
        document.getElementById('cash-customer-name').focus()
    } else {
        console.error('‚ùå Cash popup not found')
    }
}

// ‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞
function processCreditPayment(totalAmount) {
    // ‡πÅ‡∏™‡∏î‡∏á popup ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    const popup = document.getElementById('credit-popup')
    if (popup) {
        popup.style.display = 'flex'
        
        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        document.getElementById('credit-customer-name').value = ''
        
        // Focus ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        document.getElementById('credit-customer-name').focus()
    } else {
        console.error('‚ùå Credit popup not found')
    }
}

// =========================================
// Popup Functions
// =========================================

// ‡∏õ‡∏¥‡∏î popup ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î
function closeCashPopup() {
    const popup = document.getElementById('cash-popup')
    if (popup) {
        popup.style.display = 'none'
    }
}

// ‡∏õ‡∏¥‡∏î popup ‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞
function closeCreditPopup() {
    const popup = document.getElementById('credit-popup')
    if (popup) {
        popup.style.display = 'none'
    }
}

// ‡∏õ‡∏¥‡∏î popup ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
function closeCreditNewCustomerPopup() {
    const popup = document.getElementById('credit-new-customer-popup')
    if (popup) {
        popup.style.display = 'none'
    }
}

// ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î
function submitCashCustomer() {
    const customerName = document.getElementById('cash-customer-name').value.trim()
    const customerPhone = document.getElementById('cash-customer-phone').value.trim()
    
    if (!customerName) {
        alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤')
        return
    }
    
    // ‡∏õ‡∏¥‡∏î popup
    closeCashPopup()
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
    generateReceipt({
        customerName,
        customerPhone,
        paymentType: '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î'
    })
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞
async function submitCreditCustomer() {
    const customerName = document.getElementById('credit-customer-name').value.trim()
    
    if (!customerName) {
        alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤')
        return
    }
    
    try {
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
        const token = localStorage.getItem('token')
        const response = await fetch(`/api/customers/search/${encodeURIComponent(customerName)}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        })
        
        const result = await response.json()
        
        if (result.success && result.data.length > 0) {
            // ‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ - ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            showCustomerSelection(result.data)
        } else {
            // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ - ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            alert(`üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ "${customerName}" ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà`)
            
            // ‡∏õ‡∏¥‡∏î popup ‡πÄ‡∏Å‡πà‡∏≤
            closeCreditPopup()
            
            // ‡πÄ‡∏õ‡∏¥‡∏î popup ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
            const newCustomerPopup = document.getElementById('credit-new-customer-popup')
            if (newCustomerPopup) {
                newCustomerPopup.style.display = 'flex'
                
                // ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ß‡πâ
                document.getElementById('credit-new-customer-name').value = customerName
                
                // Focus ‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
                document.getElementById('credit-new-customer-phone').focus()
            }
        }
        
    } catch (error) {
        console.error('‚ùå Error searching customer:', error)
        alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤')
    }
}

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ prompt()
function showCustomerSelection(customers) {
    // ‡∏õ‡∏¥‡∏î popup ‡πÄ‡∏Å‡πà‡∏≤
    closeCreditPopup()
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á popup ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    const popup = document.createElement('div')
    popup.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    `
    
    popup.innerHTML = `
        <div style="background: white; padding: 20px; border-radius: 8px; max-width: 500px; max-height: 70vh; overflow-y: auto;">
            <h3>üîç ‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô</h3>
            <div id="customer-list">
                ${customers.map((customer, index) => `
                    <div style="border: 1px solid #ddd; margin: 10px 0; padding: 15px; border-radius: 4px; cursor: pointer; hover:background-color: #f5f5f5;" 
                         onclick="selectExistingCustomer('${customer._id}', '${customer.name}', '${customer.phone}', '${customer.address || ''}')">
                        <strong>${customer.name}</strong> (${customer.phone})<br>
                        <small>‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞: ‡∏ø${customer.credit_balance.toLocaleString()}</small>
                    </div>
                `).join('')}
            </div>
            <div style="margin-top: 20px; text-align: center;">
                <button onclick="addNewCustomerFromSearch('${document.getElementById('credit-customer-name').value}')" 
                        style="background: #28a745; color: white; padding: 10px 20px; border: none; border-radius: 4px; margin: 5px; cursor: pointer;">
                    ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
                </button>
                <button onclick="closeCustomerSelection()" 
                        style="background: #dc3545; color: white; padding: 10px 20px; border: none; border-radius: 4px; margin: 5px; cursor: pointer;">
                    ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
            </div>
        </div>
    `
    
    popup.id = 'customer-selection-popup'
    document.body.appendChild(popup)
}

// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
function selectExistingCustomer(customerId, customerName, customerPhone, customerAddress) {
    closeCustomerSelection()
    
    // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    processCheckout({
        name: customerName,
        phone: customerPhone,
        address: customerAddress
    }, 'credit')
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
function addNewCustomerFromSearch(customerName) {
    closeCustomerSelection()
    
    const newCustomerPopup = document.getElementById('credit-new-customer-popup')
    if (newCustomerPopup) {
        newCustomerPopup.style.display = 'flex'
        document.getElementById('credit-new-customer-name').value = customerName
        document.getElementById('credit-new-customer-phone').focus()
    }
}

// ‡∏õ‡∏¥‡∏î popup ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
function closeCustomerSelection() {
    const popup = document.getElementById('customer-selection-popup')
    if (popup) {
        popup.remove()
    }
}

// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
function selectExistingCustomer(customerId, customerName, customerPhone, customerAddress) {
    closeCustomerSelection()
    
    // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    processCheckout({
        name: customerName,
        phone: customerPhone,
        address: customerAddress
    }, 'credit')
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
function addNewCustomerFromSearch(customerName) {
    closeCustomerSelection()
    
    const newCustomerPopup = document.getElementById('credit-new-customer-popup')
    if (newCustomerPopup) {
        newCustomerPopup.style.display = 'flex'
        document.getElementById('credit-new-customer-name').value = customerName
        document.getElementById('credit-new-customer-phone').focus()
    }
}

// ‡∏õ‡∏¥‡∏î popup ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
function closeCustomerSelection() {
    const popup = document.getElementById('customer-selection-popup')
    if (popup) {
        popup.remove()
    }
}
// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
function submitCreditNewCustomer() {
    const customerName = document.getElementById('credit-new-customer-name').value.trim()
    const customerPhone = document.getElementById('credit-new-customer-phone').value.trim()
    const customerAddress = document.getElementById('credit-new-customer-address').value.trim()
    
    if (!customerName || !customerPhone) {
        alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå')
        return
    }
    
    // TODO: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log('üíæ Saving new customer:', { customerName, customerPhone, customerAddress })
    
    // ‡∏õ‡∏¥‡∏î popup
    closeCreditNewCustomerPopup()
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
    generateReceipt({
        customerName,
        customerPhone,
        customerAddress,
        paymentType: '‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞'
    })
}

// =========================================
// Receipt Functions
// =========================================

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
function generateReceipt(customerData) {
    const cartItems = document.querySelectorAll('#cart-items tr')
    const totalAmount = document.getElementById('total-price').textContent
    
    let receiptHTML = `
        <div style="text-align: center; margin-bottom: 20px;">
            <h4>‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô</h4>
            <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${new Date().toLocaleDateString('th-TH')}</p>
            <p>‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleTimeString('th-TH')}</p>
        </div>
        
        <div style="margin-bottom: 15px;">
            <strong>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</strong><br>
            ‡∏ä‡∏∑‡πà‡∏≠: ${customerData.customerName}<br>
            ${customerData.customerPhone ? `‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${customerData.customerPhone}<br>` : ''}
            ${customerData.customerAddress ? `‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${customerData.customerAddress}<br>` : ''}
            ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${customerData.paymentType}
        </div>
        
        <table style="width: 100%; border-collapse: collapse; margin-bottom: 15px;">
            <thead>
                <tr style="background: #f5f5f5;">
                    <th style="border: 1px solid #ddd; padding: 8px; text-align: left;">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                    <th style="border: 1px solid #ddd; padding: 8px; text-align: center;">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
                    <th style="border: 1px solid #ddd; padding: 8px; text-align: right;">‡∏£‡∏≤‡∏Ñ‡∏≤</th>
                    <th style="border: 1px solid #ddd; padding: 8px; text-align: right;">‡∏£‡∏ß‡∏°</th>
                </tr>
            </thead>
            <tbody>
    `
    
    cartItems.forEach(row => {
        const name = row.querySelector('.item-name').textContent
        const quantity = row.querySelector('.quantity-input').value
        const price = row.querySelector('.item-price').textContent
        const total = row.querySelector('.item-total').textContent
        
        receiptHTML += `
            <tr>
                <td style="border: 1px solid #ddd; padding: 8px;">${name}</td>
                <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">${quantity}</td>
                <td style="border: 1px solid #ddd; padding: 8px; text-align: right;">${price}</td>
                <td style="border: 1px solid #ddd; padding: 8px; text-align: right;">${total}</td>
            </tr>
        `
    })
    
    receiptHTML += `
            </tbody>
        </table>
        
        <div style="text-align: right; font-size: 18px; font-weight: bold; margin-top: 15px;">
            ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô: ‡∏ø${totalAmount}
        </div>
    `
    
    // ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
    const receiptContent = document.getElementById('receipt-content')
    const receiptPopup = document.getElementById('receipt')
    
    if (receiptContent && receiptPopup) {
        receiptContent.innerHTML = receiptHTML
        receiptPopup.style.display = 'flex'
        
        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        clearCart()
        
        console.log('üìÑ Receipt generated successfully')
    }
}

// ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
function clearCart() {
    const cartItems = document.getElementById('cart-items')
    cartItems.innerHTML = ''
    updateTotalPrice()
}

// ‡∏õ‡∏¥‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
function closeReceipt() {
    const receiptPopup = document.getElementById('receipt')
    if (receiptPopup) {
        receiptPopup.style.display = 'none'
    }
}

// ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
function printReceipt() {
    const receiptContent = document.getElementById('receipt-content').innerHTML
    const printWindow = window.open('', '_blank')
    
    printWindow.document.write(`
        <html>
            <head>
                <title>‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; }
                    table { border-collapse: collapse; width: 100%; }
                    th, td { border: 1px solid #ddd; padding: 8px; }
                </style>
            </head>
            <body>
                ${receiptContent}
            </body>
        </html>
    `)
    
    printWindow.document.close()
    printWindow.print()
    printWindow.close()

}
// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô createProductCard ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
function createProductCard(product) {
    const imageUrl = product.image_base64 || '/images/no-image.png'
    const stockClass = product.stock <= 0 ? 'out-of-stock' : (product.stock <= 10 ? 'low-stock' : '')
    
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    const price = currentPaymentMode === '‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞' ? product.credit_price : product.price
    
    return `
        <div class="product-card ${stockClass}" onclick="addToCart('${product._id}')" ${product.stock <= 0 ? 'disabled' : ''}>
            <img src="${imageUrl}" alt="${product.name}" onerror="this.src='/images/no-image.png'">
            <div class="product-info">
                <h5 class="product-name">${product.name}</h5>
                <p class="product-barcode">${product.barcode}</p>
                <p class="product-price">‡∏ø${price.toLocaleString()}</p>
                <p class="product-stock ${stockClass}">
                    ${product.stock <= 0 ? '‡∏´‡∏°‡∏î' : `‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${product.stock}`}
                </p>
            </div>
        </div>
    `
}

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô switchPaymentMode ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢
function switchPaymentMode(mode) {
    currentPaymentMode = mode
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI ‡∏õ‡∏∏‡πà‡∏°
    document.querySelectorAll('.select-payment').forEach(btn => {
        btn.classList.remove('active')
    })
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° active class ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const activeBtn = document.querySelector(`[data-type="${mode}"]`)
    if (activeBtn) {
        activeBtn.classList.add('active')
    }
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô
    updateCartPrices()
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    updateProductCardPrices()
    
    console.log(`üí∞ Payment mode changed to: ${mode}`)
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
function updateProductCardPrices() {
    const productCards = document.querySelectorAll('.product-card')
    
    productCards.forEach(card => {
        // ‡∏´‡∏≤ product ID ‡∏à‡∏≤‡∏Å onclick attribute
        const onclickAttr = card.getAttribute('onclick')
        if (onclickAttr) {
            const productId = onclickAttr.match(/addToCart\('([^']+)'\)/)?.[1]
            const product = allProducts.find(p => p._id === productId)
            
            if (product) {
                const priceElement = card.querySelector('.product-price')
                if (priceElement) {
                    const price = currentPaymentMode === '‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞' ? product.credit_price : product.price
                    priceElement.textContent = `‡∏ø${price.toLocaleString()}`
                }
            }
        }
    })
    
    console.log(`üè∑Ô∏è Updated product card prices for ${currentPaymentMode}`)
}


// =========================================
// Cart Management Functions (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ)
// =========================================

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô updateCartItemTotal
function updateCartItemTotal(row) {
    const productId = row.getAttribute('data-product-id')
    const product = allProducts.find(p => p._id === productId)
    
    if (!product) return
    
    const quantityInput = row.querySelector('.quantity-input')
    const priceCell = row.querySelector('.item-price')
    const totalCell = row.querySelector('.item-total')
    
    const quantity = parseInt(quantityInput.value)
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
    if (quantity < 1) {
        quantityInput.value = 1
        return
    }
    
    if (quantity > product.stock) {
        alert(`‚ùå ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${product.stock} ‡∏ä‡∏¥‡πâ‡∏ô`)
        quantityInput.value = product.stock
        return
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
    const unitPrice = calculateProductPrice(product, quantity)
    const totalPrice = unitPrice * quantity
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI
    priceCell.textContent = `‡∏ø${unitPrice.toLocaleString()}`
    totalCell.textContent = `‡∏ø${totalPrice.toLocaleString()}`
    
    updateTotalPrice()
}

// ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô
function removeFromCart(row) {
    row.remove()
    updateTotalPrice()
    console.log('üóëÔ∏è Item removed from cart')
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏£‡∏ñ‡πÄ‡∏Ç‡πá‡∏ô
function updateCartItemPriceAndTotal(row, product, quantity) {
    const priceCell = row.querySelector('.item-price')
    const totalCell = row.querySelector('.item-total')
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
    const unitPrice = calculateProductPrice(product, quantity)
    const totalPrice = unitPrice * quantity
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI
    priceCell.textContent = `‡∏ø${unitPrice.toLocaleString()}`
    totalCell.textContent = `‡∏ø${totalPrice.toLocaleString()}`
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
    if (currentPaymentMode === '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î') {
        const wasWholesale = quantity - 1 >= product.wholesale_minimum
        const isWholesale = quantity >= product.wholesale_minimum
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡πà‡∏á
        if (!wasWholesale && isWholesale) {
            showWholesalePriceNotification(product.name, quantity, product.wholesale_minimum)
        }
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏•‡∏î‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡πà‡∏á
        if (wasWholesale && !isWholesale) {
            showRetailPriceNotification(product.name, quantity, product.wholesale_minimum)
        }
    }
}



// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
function updateTotalPrice() {
    const totalCells = document.querySelectorAll('#cart-items .item-total')
    let total = 0
    
    totalCells.forEach(cell => {
        const amount = parseFloat(cell.textContent.replace('‡∏ø', '').replace(',', ''))
        total += amount
    })
    
    document.getElementById('total-price').textContent = total.toLocaleString()
}

//‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô changeQuantity
function changeQuantity(productId, change) {
    const row = document.querySelector(`tr[data-product-id="${productId}"]`)
    if (!row) return
    
    const quantityInput = row.querySelector('.quantity-input')
    const currentQty = parseInt(quantityInput.value)
    const newQty = currentQty + change
    
    const product = allProducts.find(p => p._id === productId)
    if (!product) return
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï
    if (newQty < 1) {
        if (confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
            removeFromCart(row)
        }
        return
    }
    
    if (newQty > product.stock) {
        alert(`‚ùå ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${product.stock} ‡∏ä‡∏¥‡πâ‡∏ô`)
        return
    }
    
    quantityInput.value = newQty
    updateCartItemTotal(row)
}

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô submitCashCustomer() ‡πÅ‡∏•‡∏∞ submitCreditNewCustomer()

// ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î
async function submitCashCustomer() {
    const customerName = document.getElementById('cash-customer-name').value.trim()
    const customerPhone = document.getElementById('cash-customer-phone').value.trim()
    
    if (!customerName || !customerPhone) {
        alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå')
        return
    }
    
    // ‡∏õ‡∏¥‡∏î popup
    closeCashPopup()
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    await processCheckout({
        name: customerName,
        phone: customerPhone
    }, 'cash')
}

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
async function submitCreditNewCustomer() {
    const customerName = document.getElementById('credit-new-customer-name').value.trim()
    const customerPhone = document.getElementById('credit-new-customer-phone').value.trim()
    const customerAddress = document.getElementById('credit-new-customer-address').value.trim()
    
    if (!customerName || !customerPhone) {
        alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå')
        return
    }
    
    // ‡∏õ‡∏¥‡∏î popup
    closeCreditNewCustomerPopup()
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    await processCheckout({
        name: customerName,
        phone: customerPhone,
        address: customerAddress
    }, 'credit')
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
async function processCheckout(customerData, paymentType) {
    try {
        console.log('üí∞ Processing checkout...', { customerData, paymentType })
        
        // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        const cartItems = []
        const cartRows = document.querySelectorAll('#cart-items tr')
        
        cartRows.forEach(row => {
            const productId = row.getAttribute('data-product-id')
            const product = allProducts.find(p => p._id === productId)
            
            if (product) {
                const quantity = parseInt(row.querySelector('.quantity-input').value)
                const unitPrice = parseFloat(row.querySelector('.item-price').textContent.replace('‡∏ø', '').replace(',', ''))
                
                cartItems.push({
                    product_id: product._id,
                    product_name: product.name,
                    product_barcode: product.barcode,
                    quantity: quantity,
                    unit_price: unitPrice
                })
            }
        })
        
        const totalAmount = parseFloat(document.getElementById('total-price').textContent.replace(',', ''))
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
        const token = localStorage.getItem('token')
        const response = await fetch('/api/sales/checkout-with-customer-update', { // ‚Üê ‡πÅ‡∏Å‡πâ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({
                customer_data: customerData,
                payment_type: paymentType,
                cart_items: cartItems,
                total_amount: totalAmount
            })
        })
        
        const result = await response.json()
        console.log('üì• Checkout response:', result)
        
        if (result.success) {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
            generateReceipt({
                customerName: customerData.name,
                customerPhone: customerData.phone,
                customerAddress: customerData.address,
                paymentType: paymentType === 'cash' ? '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î' : '‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞',
                orderNumber: result.data.order_number
            })
            
            alert(`‚úÖ ${paymentType === 'cash' ? '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï'}‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: ${result.data.order_number}`)
        } else {
            alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.message)
        }
        
    } catch (error) {
        console.error('‚ùå Checkout error:', error)
        alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: ' + error.message)
    }
}





// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î
document.addEventListener('DOMContentLoaded', function() {
    checkAuth()
    displayUserInfo()
    updateAllProfileButtons() // ‚Üê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
    loadPOSProducts()


    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ - Payment Mode Buttons
    document.querySelectorAll('.select-payment').forEach(btn => {
        btn.addEventListener('click', function() {
            const mode = this.getAttribute('data-type')
            switchPaymentMode(mode)
        })
    })

     // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ - Pay Button
    const payButton = document.querySelector('.pay')
    if (payButton) {
        payButton.addEventListener('click', processPayment)
    }
}) 