// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
let selectedCustomer = null
let allCustomersForPayment = []

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
document.addEventListener('DOMContentLoaded', function() {
    console.log('üí≥ Debt payment page loaded')
    
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    loadCustomersForPayment()
    
    // Event listeners
    document.getElementById('customer-name')?.addEventListener('input', searchCustomer)
    document.getElementById('confirm-btn')?.addEventListener('click', processPayment)
})

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function loadCustomersForPayment() {
    try {
        const token = localStorage.getItem('token')
        const response = await fetch('/api/customers', {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        })
        
        const result = await response.json()
        if (result.success) {
            allCustomersForPayment = result.data.filter(c => c.credit_balance > 0) // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á
            console.log(`üìã Loaded ${allCustomersForPayment.length} customers with debt`)
        }
    } catch (error) {
        console.error('‚ùå Error loading customers:', error)
    }
}

// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
function searchCustomer() {
    const customerName = document.getElementById('customer-name').value.trim()
    const balanceInfo = document.getElementById('balance-info')
    const payAmountInput = document.getElementById('pay-amount')
    
    if (!customerName) {
        balanceInfo.textContent = '‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á'
        selectedCustomer = null
        payAmountInput.value = ''
        return
    }
    
    // ‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    const foundCustomer = allCustomersForPayment.find(c => 
        c.name.toLowerCase().includes(customerName.toLowerCase()) ||
        c.phone.includes(customerName)
    )
    
    if (foundCustomer) {
        selectedCustomer = foundCustomer
        balanceInfo.innerHTML = `
            <strong>‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</strong> ${foundCustomer.name} (${foundCustomer.phone})<br>
            <strong>‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞:</strong> <span style="color: #dc3545; font-weight: bold;">‡∏ø${foundCustomer.credit_balance.toLocaleString()}</span>
        `
        balanceInfo.style.color = '#28a745'
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        payAmountInput.value = foundCustomer.credit_balance
        payAmountInput.max = foundCustomer.credit_balance
    } else {
        selectedCustomer = null
        balanceInfo.textContent = `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ "${customerName}" ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞`
        balanceInfo.style.color = '#dc3545'
        payAmountInput.value = ''
    }
}

// ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
async function processPayment() {
    if (!selectedCustomer) {
        alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô')
        return
    }
    
    const payAmount = parseFloat(document.getElementById('pay-amount').value)
    
    if (!payAmount || payAmount <= 0) {
        alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
        return
    }
    
    if (payAmount > selectedCustomer.credit_balance) {
        alert('‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞')
        return
    }
    
    if (!confirm(`‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô?\n\n‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${selectedCustomer.name}\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ‡∏ø${payAmount.toLocaleString()}\n‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ‡∏ø${(selectedCustomer.credit_balance - payAmount).toLocaleString()}`)) {
        return
    }
    
    try {
        console.log(`üí∞ Processing payment: ${payAmount} for ${selectedCustomer.name}`)
        
        const token = localStorage.getItem('token')
        const response = await fetch(`/api/customers/${selectedCustomer._id}/payment`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({
                amount: payAmount,
                payment_method: 'cash',
                notes: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞'
            })
        })
        
        const result = await response.json()
        
        if (result.success) {
            alert(`‚úÖ ‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${selectedCustomer.name}\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ‡∏ø${payAmount.toLocaleString()}\n‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ‡∏ø${result.data.remaining_balance.toLocaleString()}`)
            
            // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
            document.getElementById('customer-name').value = ''
            document.getElementById('pay-amount').value = ''
            document.getElementById('balance-info').textContent = '‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á'
            selectedCustomer = null
            
            // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
            loadCustomersForPayment()
            
        } else {
            alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.message)
        }
        
    } catch (error) {
        console.error('‚ùå Payment error:', error)
        alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô')
    }
}
